// Created on June, 2021
// @author: Fábio Araújo de Sá

// Page 69 of Lectures Material --> The eficiency of recursion
A cada chamada recursiva, o endereço de memória dessa instrução tem de ser empurrado para a Stack (pilha), para que quando regressar
ao caso de paragem, o programa volte ao passo anterior para resgatar o valor formado totalmente.

// Page 79, 80 of Lectures Material --> Arrays
Functions cannot return arrays, using a return statement. However, an array can be returned, if it is embedded in a struct.
When a multidimensional array is used as a formal function parameter, the size of the first dimension is not given, 
but the remaining dimension sizes must be given in square brackets. Example: int numbers[][3] = {{2, 3, 4}, {3282, 12389, 12}};
See page 118 of Notes.
Be careful about const arrays declaration!

// Page 102 of Lectures Material --> Pointers
& --> Returns the memory adress of its operand
int example = 10;
int *p1 = &example;
cout << "& example: " << p1 << endl; (returns "0x7389FED9")
* --> Returns the value of number in adress *p1
int another = *p1;
cout << another << endl; (returns "10")
You can compare 2 pointers in a relational expression: if ( p1 < p2 ) cout << "p1 points to lower memory than p2"; 

// Page 106 of Lectures Material --> Types of Memory
Heap --> Zona para armazenar os dados provenientes dos métodos new, delete, malloc() e free()
Stack --> Onde são guardados os endereços de retorno de chamadas das funções (recursivas, por exemplo)

// Page 149 of Lectures Material --> Unions and Enum
Unions --> Permite fazer store de tipos diferentes de dados no mesmo sítio da memória. O tamanho é ditado pelo maior tipo que a
union contém. Ao colocar um novo valor na zona de memória, estrago os anteriores. Uma union não pode ter membros da STL container,
como por exemplo strings ou vectors (uma vez que têm comprimento dinâmico).
Enum --> Serve para enumerar tipos de alguma coisa, caracterizar uma union por exemplo, de modo a só buscar. O resultado
de struct.typeNum = número, de índex escolhido aquando a formação do enum.

// Page 159 of Lecture Material --> Files
Streams devem ser sempre colocadas em parâmetro do tipo call-by-reference e não call-by-value

// Page 209 of Lecture Material --> Multiple definitions of a Class (error in C++)
#ifndef CLASS_H - Verifica se a classe já está definida antes no stack
#define CLASS_H - Define a classe
#endif - Se ifndef, então salta para endif e não a define novamente, para evitar os erros de compilação separada

// Page 217 of Lecture Material --> Declaring variables
A variable is defined when the compiler allocates the storage for the variable.
A variable is declared when the compiler is informed that a variable exists (and which is its type). It does not allocate the storage for the variable at that point.

// Page 223 of Lecture Material --> Linked lists implementation
Ver isto com mais calma! Se é que sai no exame...
NOTA: Ver o significado e importância do #include <cstddef> e <cassert> e o method assert()
NOTA: Ver como se remove um valor específico em vectores e em arrays

// Page 245 of Lecture Material --> Template classes and Functions
How does template specialization work?
When we write any template based function or class, compiler creates a copy of that function/class
whenever compiler sees that being used for a new data type or new set of data types (in case of multiple template arguments).
If a specialized version is present, compiler first checks with the specialized version and then the main template.
Compiler first checks with the most specialized version by matching the passed parameter with the data type(s) specified in a specialized version.

// Page 266 of Lecture Material --> Containers
Associative Containers --> Map, Multimap
Sequence Containers --> List, Vector

// Page 269 of Lecture Material --> For loop eficiency
for (auto x : phone_user) will create a temporary copy of each element; usually less efficient
for (auto & x : phone_user) won't create copies, and allows you to modify the elements if the underlying container allows that (that is, it is not 'const').
for (const auto & x : phone_user) won't create copies and won't allow you to do any modifications; this can prevent accidental modifications.

// Page 336 of Lecture Material --> Object Oriented Languages
Encapsulamento --> Não deixa certos atributos serem modificados por funções externas. Private atributes;
Herança --> O objecto fica com as propriedades de outros objectos. Definir classes a partir de outras classes (derivadas);
Polimorfismo --> Código comporta-se de formas diferentes de acordo com o contexto. Existe polimorfismo em tempo de compilação (estático, como overloading e templates), 
mas também existe polimorfismo em run-time (dinâmico), como a herança e as funções virtuais (Virtual Functions);
Virtual Functions --> Em vez do compilador determinar qual método é chamado, os parâmetros da função é que decidem qual a função a ser invocada;

// Page 340/341 of Lecture Material --> OOP characterists
Protected: usada na parent class. Os atributos em protected são privados fora da classe e públicos nas child classes;
Note: see summary-table in page 341

Important!
""Neste contexto, o qualificativo static significa que só existe uma instância de possibleCoins para todos os objetos
da classe Purse""