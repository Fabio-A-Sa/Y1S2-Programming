// Created on June, 2021
// @author: Fábio Araújo de Sá

// Page 69 of Lectures Material --> The eficiency of recursion
A cada chamada recursiva, o endereço de memória dessa instrução tem de ser empurrado para a Stack (pilha), para que quando regressar
ao caso de paragem, o programa volte ao passo anterior para resgatar o valor formado totalmente.

// Page 79, 80 of Lectures Material --> Arrays
Functions cannot return arrays, using a return statement. However, an array can be returned, if it is embedded in a struct.
When a multidimensional array is used as a formal function parameter, the size of the first dimension is not given, 
but the remaining dimension sizes must be given in square brackets. Example: int numbers[][3] = {{2, 3, 4}, {3282, 12389, 12}};
See page 118 of Notes.
Be careful about const arrays declaration!

// Page 102 of Lectures Material --> Pointers
& --> Returns the memory adress of its operand
int example = 10;
int *p1 = &example;
cout << "& example: " << p1 << endl; (returns "0x7389FED9")
* --> Returns the value of number in adress *p1
int another = *p1;
cout << another << endl; (returns "10")
You can compare 2 pointers in a relational expression: if ( p1 < p2 ) cout << "p1 points to lower memory than p2"; 

// Page 106 of Lectures Material --> Types of Memory
Heap --> Zona para armazenar os dados provenientes dos métodos new, delete, malloc() e free()
Stack --> Onde são guardados os endereços de retorno de chamadas das funções (recursivas, por exemplo)

// Page 149 of Lectures Material --> Unions and Enum
Unions --> Permite fazer store de tipos diferentes de dados no mesmo sítio da memória. O tamanho é ditado pelo maior tipo que a
union contém. Ao colocar um novo valor na zona de memória, estrago os anteriores.
